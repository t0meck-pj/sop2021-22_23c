Zadanie 1:
#!/bin/bash
echo -e "Witaj w terminalu"

Zadanie 2:
X=test
Przypisałem „tekst” do zmiennej X. 
echo $X
Po wywołaniu echo w konsoli pokazało się „tekst”.
bash
Otworzyłem nowy proces bash'a.
echo $X
Teraz zmienna jest pusta, ponieważ nie została wyeksportowana z poprzedniego procesu basha.

X=Tekst dłuższy
Błędne jest tutaj przypisanie wartości do zmiennej. Powinniśmy użyć ‘ lub ‘’.
‘ – używamy, gdy cala zmienna ma być tylko ciagiem znakow
‘’ – tutaj wartość zmiennej jest poprawnie wyswietlana

Konsola: Ala ma kota, a kot ma Alaę

Zadanie 3:
PATH – wypisuje sciezki do folderow zawierających programy/funkcje/komendy.
Pozwala nam to także na dodanie do tej zmiennej sciezki do katalogu z programem, ułatwia to wykonywanie skryptow, polecen etc.
RANDOM – zwraca losowa liczbe, może się przydać gdy piszemy jakiś skrypt i musimy wylosować jakas liczba
PWD – zwraca sciezke aktulanie otwartego katalogu. Pomaga odnaleźć swoja obecna pozycje w systemie. 
PS1 - jest głównym monitem wyświetlanym przed każdym poleceniem. Pozwala nam na personalizowanie terminala. Np. dodanie godziny, pokazanie ilości wolnej pamięci.
USER – wyswietla nazwe obecnego usera
HOSTNAME – zwraca nazwe hosta
OSTYPE – zwraca rodzaj typ systemy operacyjnego 

Zadanie 4:
X=$(ls -l) - przypisuje ls -l do zmiennej
echo $X - wypisze wynik

Roznica pomiedzy zwyklym wykonaniem komendy, a wypisaniem zawartosci zmiennej jest taka, ze polecenie echo wyswietlanam linie tekstu. 
Natomiast polecenie ls -l wyswietla nam wynik w bardziej przejrzysty sposob. Sposob aby wyswietlic zawartosc zmiennej w takim sam sposob 
jak robi to polecenie ls -l tyle, ze bez kolorkow, to echo "${X}".

Zadanie 5:
5a:
#!/bin/bash
A=Ala
echo "$A ma kota, kot ma ${A%a}e"

#!/bin/bash

imie=$1
if [ ${imie: -1} = "a" ]; then
        echo "$imie ma kota, a kot ma ${imie::-1}ę"
else
        echo "$imie ma kota, a kot ma ${imie}a"
fi

5b:
#!/bin/bash

word=&{#1}

1: echo ${1:0:1}
2: echo ${1:word-1:1}
3: echo -e $1 | sed s/SOP/`echo -e "\e[32mSOP\e[0m"`/g


Zadanie 6:
#!/bin/bash
A=Ala
echo  -e "$A ma kota, kot ma $A" | sed 's/a$/e/g'

Zadanie domowe:
#!/bin/bash
sed -e s/Szymon/`echo -e "\e[31mSzymon\e[0m"`/g $1
